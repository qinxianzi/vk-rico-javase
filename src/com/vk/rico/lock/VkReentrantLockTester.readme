2.3.2 重进入
当一个线程请求其他线程已经占有的锁时，请求线程将被阻塞。然而线程在试图获得它自己占有的锁时，请求会成功。
重进入的实现是通过为每个锁关联一个请求计数（acquisition count）和一个占有它的线程，当计数为0时，认为锁是未被占有的。
线程请求一个未被占有的锁时，JVM将记录锁的占有者，并且将请求计数置为1；如果同一线程再次请求这个锁，计数将递增；
每次占用线程退出同步块，计数器值将递减，直到计数器达到0时，锁被释放。
重进入方便了锁行为的封装，因此简化了面向对象并发代码的开发。
 
 /*
 * 锁没有被其他线程占用时，获得锁，并返回true<br/>
 * 
 * 如果当前线程已经占有了锁，则锁上的计数器加1，且该方法返回true："锁重进入"的体现<br/>
 * 如果锁被其他线程占有，则该方法会立刻返回false<br/>
 *
 * 以下情况返回true：1)、锁是空闲的，并且被当前线程占有；2)、锁已经被当前线程占有（重进入）。否则返回false
 *	 
 */
 public boolean tryLock();
 
 public boolean tryLock(long timeout, TimeUnit unit) throws InterruptedException;
 
 
 ReentrantLock中文API
 http://www.apihome.cn/api/java/ReentrantLock.html
 
 
 重点参考文章：
 http://www.cnblogs.com/xrq730/p/4979021.html
 